Tablice są numerowane od zera, podobnie jak w C albo w Javie. 
Ujemny indeks oznacza pozycję od końca tablicy tj. 
pole z indeksem -1 będzie oznaczało ostatnie pole w tablicy,
 -2 przedostatnie i tak dalej.


Metody które możemy stosować przy tablicach:
----------------------------------------------------------------------------------------------------------------
[ ] – nawiasy kwadratowe. Pozwalają wypełnić nowo powstałą tablicę konkretnymi wartościami, 
na przykład:

Array.[]( 1, 'a', /^A/ )
=>[1, "a", /^A/]

Jak widzimy tablice nie muszą przechowywać tylko jednego typu danych. Każde pole może być innego typu.
Tą samą operację możemy zapisać również jako:
Array[ 1, 'a', /^A/ ]

Nie musimy nawet używać jakby się wydawało kluczowego słówka "Array"

[ 1, 'a', /^A/ ]

new - zwraca nową tablicę, w któej opcjonalnie możemy zadeklarować jej wielkość, a nawet wartość domyślną.

Array.new - pusta tablica, nie wypełniona.
=>[]

Array.new(2) - pusta tablica z 2 pustymi (nil) polami.
=>[nil,nil]

Array.new(5, "A") - 5 elementowa tablica wypełniona w każdym polu dużą literą A.
=>["A", "A", "A", "A", "A"]
----------------------------------------------------------------------------------------------------------------


Operacje na tablicach
----------------------------------------------------------------------------------------------------------------
& - tablica1 & tablica2 - zwraca nową tablicę składającą się z części wspólnej tablicy 1 i 2. Bez powtórzeń.
[ 1, 1, 3, 5 ] & [ 1, 2, 3 ] 
=>[1, 3]

* - tablica * liczba - zwraca tablicę pomnożoną o daną liczbę.
[ 1, 2, 3 ] * 3
=>[1, 2, 3, 1, 2, 3, 1, 2, 3]

* - tablica * napis - zwraca tablicę w której między polami oryginalnej został dodany podany napis.
[1,2,3,4,5] * test
=> "1test2test3test4test5"

+ - tablica1+tablica2 - dodaje ze sobą dwie tablice i tworzy nową.
[1,2,3] + [5,6]
=> [1,2,3,5,6]

- - tablica1 - tablica 2 - odejmuje od pierwszej tablicy drugą i tworzy nową.
[1,2,3,5,6] - [1,2,3]
=> [5,6]

<< - tablica1 << obiekt - dodaje na końcu tablicy podany obiekt i tworzy nową tablicę, dlatego tą operację 
można wykonać wielokrotnie.
[1,2,3] << "c" << "a" << [5,6]
=> [1,2,3,c,a,5,6]

<=> - tablica1 <=> tablica2 - zwraca wartość -1,0 lub 1 jeśli: pierwsza tablica jest mniejsza, są równe,
albo pierwsza jest większa.
[1,2,3] <=> [1,2]
=> 1

[1,2] <=> [1,2,3]
=> -1

[1,2,3] <=> [1,2,3]
=>0


== - tablica1 == tablica2 - zwraca wartość true jeśli dwie tablice są sobie równe, bądź false jeśli nie.
[1,2,3] == [1,2,3]
=> true

[1,2,3] == [1,2]
=> false

=== - tablica1 === tablica2 - tak samo jak "=="

[ ] - tablica[indeks] lub tablica[start,długość] lub tablica[zakres] - zwraca element o podanym indeksie, nową tablicę 
zaczynającą się w podanym punkcie i o długości podanej w parametrze, nową tablicę z wartościami z danego zakresu 
lub nil jeśli podaliśmy indeks spoza zakresu
a = [ "a", "b", "c", "d", "e" ]

a[2] +  a[0] + a[1]
=> "cab"

a[6]
=> nil

a[1, 2]
=> ["b", "c"]

a[1..3]
=> ["b", "c", "d"]

a[4..7]
=> ["e"]

a[6..10]
=> nil

a[-3, 3]
=> ["c", "d", "e"]

[]= - tablica[indeks] lub tablica[start,długość] lub tablica[zakres] - ustawia wartość w polu o podanym indeksie,
zakresie. Jeśli podany indeks jest większy niż obecna długość tablicy, to tablica jest automatycznie zwiększana.
a = Array.new
=> []

a[4] = "4";  
=> [ nil, nil, nil, nil, 4]

a[0, 3] = [ 'a', 'b', 'c' ];
=> ["a", "b", "c", nil, "4"]

a[1..2] = [ 1, 2 ];  
=> ["a", 1, 2, nil, "4"]

a[0, 2] = "?";
=> ["?", 2, nil, "4"]

a[0..2] = "A"; 
=> ["A", "4"]

a[-1] = "Z";
=> ["A", "Z"]

a[1..-1] = nil;
=> ["A"]

| - tablica1|tablica2 - łączy ze sobą 2 tablice bez powtórzeń.
["a","b","c"] | ["c","d","a"] 	
=>	["a", "b", "c", "d"]

assoc - tablica.assoc(obiekt) - Przeszukuje tablice, której elementami są inne tablice w poszukiwaniu danego obiektu.
Zwraca pierwszą tablicę w której odnaleziono szukany obiekt, lub nil jeśli nie znaleziono go wcale.

s1 = [ "colors", "red", "blue", "green" ]
s2 = [ "letters", "a", "b", "c" ]
s3 = "foo"
a  = [ s1, s2, s3 ]
a.assoc("letters") 	
=> ["letters", "a", "b", "c"]

a.assoc("foo") 
=> nil

at - tablica.at(indeks) - zwraca element o podanym indeksie. Ujemny indeks oznacza pozycję od końca tablicy.
a = [ "a", "b", "c", "d", "e" ]
a.at(0) 
=> "a"

a.at(-1) 
=> "e"

clear - tablica.clear - czyści wszystkie elementy tablicy
a = [ "a", "b", "c", "d", "e" ]
a.clear
=> []

collect - tablica.collect{| obiekt | blok }  - zwraca nową tablicę i wywołuje się dla każdego elementu tablicy
wykonując wykonując instrukcje podane w bloku.
a = [ "a", "b", "c", "d" ]
a.collect {|x| x + "!" }
=> ["a!", "b!", "c!", "d!"]

a
=> ["a", "b", "c", "d"]

collect! - tablica.collect!{| obiekt | block } - modyfikuje tablice przechodząc przez jej każde pole i wykonując
polecenia w bloku.
a = [ "a", "b", "c", "d" ]
a.collect! {|x| x + "!" }
=>["a!", "b!", "c!", "d!"]

a
=> ["a!", "b!", "c!", "d!"]

